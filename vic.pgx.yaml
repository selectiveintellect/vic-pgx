---
+grammar: vic
+toprule: program
+version: 0.0.1
DOLLAR:
  .rgx: \$
SEMI:
  .rgx: ;
blank_line:
  .all:
  - +min: 0
    .ref: whitespace
  - .rgx: \r?\n
block:
  .all:
  - .ref: name
  - .rgx: '[\ \t]*\{[\ \t]*\r?\n?'
comment:
  .any:
  - .rgx: '[\ \t]*\#.*\r?\n'
  - .ref: blank_line
double_quoted_string:
  .rgx: (?:"((?:[^\n\\"]|\\"|\\\\|\\[0nt])*?)")
end_block:
  .rgx: '[\ \t]*\}[\ \t]*\r?\n?'
header:
  .any:
  - .ref: uc_header
  - .ref: comment
identifier:
  .rgx: ([a-zA-Z][0-9A-Za-z_]*)
instruction:
  .all:
  - .ref: name
  - +min: 0
    .ref: values
  - +min: 0
    .ref: whitespace
  - .ref: SEMI
name:
  .all:
  - +min: 0
    .ref: whitespace
  - .ref: identifier
  - +min: 0
    .ref: whitespace
number:
  .rgx: (0x[0-9a-fA-F]+|0X[0-9a-fA-F]+|[0-9]+)
number_units:
  .all:
  - .ref: number
  - +min: 0
    .ref: whitespace
  - .ref: units
program:
  .all:
  - .ref: uc_select
  - +min: 0
    .ref: header
  - +min: 0
    .ref: statement
single_quoted_string:
  .rgx: (?:'((?:[^\n\\']|\\'|\\\\)*?)')
statement:
  .any:
  - .ref: comment
  - .ref: block
  - .ref: instruction
  - .ref: end_block
string:
  .any:
  - .ref: single_quoted_string
  - .ref: double_quoted_string
uc_header:
  .rgx: set_(config|org)[\ \t]*(.*);\r?\n
uc_select:
  .rgx: PIC[\ \t]+((?i:P16F690|P16F690X));\r?\n
units:
  .rgx: (s|ms|us)
value:
  .all:
  - +min: 0
    .ref: whitespace
  - .any:
    - .ref: string
    - .ref: number_units
    - .ref: number
    - .ref: variable
  - +min: 0
    .ref: whitespace
value_comma:
  .all:
  - .ref: value
  - .rgx: ','
values:
  .all:
  - +min: 0
    .ref: value_comma
  - .ref: value
variable:
  .all:
  - .ref: DOLLAR
  - .ref: identifier
whitespace:
  .rgx: '[\ \t]+'
