{
   "+grammar" : "vic",
   "+toprule" : "program",
   "+version" : "0.0.5",
   "COMMA" : {
      ".rgx" : ","
   },
   "DOLLAR" : {
      ".rgx" : "\\$"
   },
   "EOS" : {
      ".rgx" : "\\z"
   },
   "_" : {
      ".rgx" : "[\\ \\t]*"
   },
   "__" : {
      ".rgx" : "[\\ \\t]+"
   },
   "assign_operator" : {
      ".rgx" : "([\\+\\-%\\^\\*\\|&/]?=)"
   },
   "bit_operator" : {
      ".rgx" : "([\\|\\^&])"
   },
   "blank_line" : {
      ".rgx" : "[\\ \\t]*\\r?\\n"
   },
   "block" : {
      ".all" : [
         {
            ".ref" : "start_block"
         },
         {
            "+min" : 0,
            ".ref" : "statement"
         },
         {
            ".ref" : "end_block"
         }
      ]
   },
   "comment" : {
      ".any" : [
         {
            ".rgx" : "[\\ \\t]*\\#.*\\r?\\n"
         },
         {
            ".ref" : "blank_line"
         }
      ]
   },
   "compare_operator" : {
      ".rgx" : "([!=<>]=|(?:<|>))"
   },
   "comparison" : {
      ".all" : [
         {
            ".ref" : "expr_value"
         },
         {
            ".ref" : "compare_operator"
         },
         {
            ".ref" : "expr_value"
         }
      ]
   },
   "complement" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "complement_operator"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "variable"
         },
         {
            ".ref" : "_"
         }
      ]
   },
   "complement_operator" : {
      ".rgx" : "(\\~|!)"
   },
   "conditional" : {
      ".all" : [
         {
            ".ref" : "conditional_subject"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "COMMA"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "conditional_predicate"
         }
      ]
   },
   "conditional_predicate" : {
      ".any" : [
         {
            ".ref" : "conditional_predicate_double"
         },
         {
            ".ref" : "conditional_predicate_single"
         }
      ]
   },
   "conditional_predicate_double" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "block"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "COMMA"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "block"
         },
         {
            ".ref" : "line_ending"
         }
      ]
   },
   "conditional_predicate_single" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "block"
         },
         {
            ".ref" : "line_ending"
         }
      ]
   },
   "conditional_subject" : {
      "+min" : 0,
      ".ref" : "single_conditional",
      ".sep" : {
         ".ref" : "logic_operator"
      }
   },
   "config_expression" : {
      ".all" : [
         {
            ".ref" : "name"
         },
         {
            ".rgx" : "=[\\ \\t]*"
         },
         {
            ".any" : [
               {
                  ".ref" : "number_units"
               },
               {
                  ".ref" : "number"
               }
            ]
         },
         {
            ".ref" : "_"
         }
      ]
   },
   "double_quoted_string" : {
      ".rgx" : "(?:\"((?:[^\\n\\\\\"]|\\\\\"|\\\\\\\\|\\\\[0nt])*?)\")"
   },
   "end_block" : {
      ".rgx" : "[\\ \\t]*\\}[\\ \\t]*\\r?\\n?"
   },
   "expr_value" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".any" : [
               {
                  ".ref" : "number"
               },
               {
                  ".ref" : "variable"
               },
               {
                  ".ref" : "number_units"
               },
               {
                  ".ref" : "complement"
               }
            ]
         },
         {
            ".ref" : "_"
         }
      ]
   },
   "expression" : {
      ".any" : [
         {
            ".ref" : "lhs_op_rhs"
         },
         {
            ".ref" : "lhs_op"
         },
         {
            ".ref" : "op_rhs"
         },
         {
            ".ref" : "conditional"
         }
      ]
   },
   "header" : {
      ".any" : [
         {
            ".ref" : "uc_config"
         },
         {
            ".ref" : "comment"
         }
      ]
   },
   "identifier" : {
      ".rgx" : "([a-zA-Z][0-9A-Za-z_]*)"
   },
   "incdec_operator" : {
      ".rgx" : "(\\+\\+|\\-\\-)"
   },
   "instruction" : {
      ".all" : [
         {
            ".ref" : "name"
         },
         {
            ".ref" : "values"
         },
         {
            ".ref" : "line_ending"
         }
      ]
   },
   "lhs_op" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "variable"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "incdec_operator"
         },
         {
            ".rgx" : "[\\ \\t]*;?[\\ \\t]*\\r?\\n?"
         }
      ]
   },
   "lhs_op_rhs" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "variable"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "assign_operator"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "rhs_expr"
         },
         {
            ".ref" : "line_ending"
         }
      ]
   },
   "line_ending" : {
      ".rgx" : "[\\ \\t]*;[\\ \\t]*\\r?\\n?"
   },
   "logic_operator" : {
      ".rgx" : "([&\\|]{2})"
   },
   "math_operator" : {
      ".rgx" : "([\\+\\-\\*/%])"
   },
   "name" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "identifier"
         },
         {
            ".ref" : "_"
         }
      ]
   },
   "number" : {
      ".rgx" : "(0[xX][0-9a-fA-F]+|[0-9]+)"
   },
   "number_units" : {
      ".all" : [
         {
            ".ref" : "number"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "units"
         }
      ]
   },
   "op_rhs" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".ref" : "incdec_operator"
         },
         {
            ".ref" : "_"
         },
         {
            ".ref" : "variable"
         },
         {
            ".rgx" : "[\\ \\t]*;?[\\ \\t]*\\r?\\n?"
         }
      ]
   },
   "program" : {
      ".all" : [
         {
            ".ref" : "uc_select"
         },
         {
            "+min" : 0,
            ".ref" : "header"
         },
         {
            "+min" : 0,
            ".ref" : "statement"
         },
         {
            ".ref" : "EOS"
         }
      ]
   },
   "rhs_expr" : {
      "+min" : 0,
      ".ref" : "expr_value",
      ".sep" : {
         ".ref" : "rhs_operator"
      }
   },
   "rhs_operator" : {
      ".any" : [
         {
            ".ref" : "math_operator"
         },
         {
            ".ref" : "bit_operator"
         }
      ]
   },
   "single_conditional" : {
      ".any" : [
         {
            ".ref" : "comparison"
         },
         {
            ".ref" : "complement"
         }
      ]
   },
   "single_quoted_string" : {
      ".rgx" : "(?:'((?:[^\\n\\\\']|\\\\'|\\\\\\\\)*?)')"
   },
   "start_block" : {
      ".all" : [
         {
            ".ref" : "name"
         },
         {
            ".rgx" : "[\\ \\t]*\\{[\\ \\t]*\\r?\\n?"
         }
      ]
   },
   "statement" : {
      ".any" : [
         {
            ".ref" : "comment"
         },
         {
            ".ref" : "instruction"
         },
         {
            ".ref" : "expression"
         },
         {
            ".ref" : "block"
         }
      ]
   },
   "string" : {
      ".any" : [
         {
            ".ref" : "single_quoted_string"
         },
         {
            ".ref" : "double_quoted_string"
         }
      ]
   },
   "uc_config" : {
      ".all" : [
         {
            ".rgx" : "config"
         },
         {
            ".ref" : "__"
         },
         {
            ".ref" : "name"
         },
         {
            ".ref" : "config_expression"
         },
         {
            ".ref" : "line_ending"
         }
      ]
   },
   "uc_select" : {
      ".rgx" : "PIC[\\ \\t]+((?i:P16F690|P16F690X))[\\ \\t]*;[\\ \\t]*\\r?\\n?"
   },
   "units" : {
      ".rgx" : "(s|ms|us|kHz|Hz|MHz)"
   },
   "validated_variable" : {
      ".ref" : "identifier"
   },
   "value" : {
      ".all" : [
         {
            ".ref" : "_"
         },
         {
            ".any" : [
               {
                  ".ref" : "string"
               },
               {
                  ".ref" : "number_units"
               },
               {
                  ".ref" : "number"
               },
               {
                  ".ref" : "variable"
               },
               {
                  ".ref" : "block"
               },
               {
                  ".ref" : "validated_variable"
               }
            ]
         },
         {
            ".ref" : "_"
         }
      ]
   },
   "values" : {
      "+min" : 0,
      ".ref" : "value",
      ".sep" : {
         ".ref" : "COMMA"
      }
   },
   "variable" : {
      ".all" : [
         {
            ".ref" : "DOLLAR"
         },
         {
            ".ref" : "identifier"
         }
      ]
   }
}
